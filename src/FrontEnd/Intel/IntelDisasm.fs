(*
  B2R2 - the Next-Generation Reversing Platform

  Author: Sang Kil Cha <sangkilc@kaist.ac.kr>
          DongYeop Oh <oh51dy@kaist.ac.kr>

  Copyright (c) SoftSec Lab. @ KAIST, since 2016

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*)

module internal B2R2.FrontEnd.Intel.Disasm

open B2R2
open B2R2.BinFile
open B2R2.FrontEnd
open System.Text

let regToStr = function
  | R.RAX -> "rax"
  | R.RBX -> "rbx"
  | R.RCX -> "rcx"
  | R.RDX -> "rdx"
  | R.RSP -> "rsp"
  | R.RBP -> "rbp"
  | R.RSI -> "rsi"
  | R.RDI -> "rdi"
  | R.EAX -> "eax"
  | R.EBX -> "ebx"
  | R.ECX -> "ecx"
  | R.EDX -> "edx"
  | R.ESP -> "esp"
  | R.EBP -> "ebp"
  | R.ESI -> "esi"
  | R.EDI -> "edi"
  | R.AX -> "ax"
  | R.BX -> "bx"
  | R.CX -> "cx"
  | R.DX -> "dx"
  | R.SP -> "sp"
  | R.BP -> "bp"
  | R.SI -> "si"
  | R.DI -> "di"
  | R.AL -> "al"
  | R.BL -> "bl"
  | R.CL -> "cl"
  | R.DL -> "dl"
  | R.AH -> "ah"
  | R.BH -> "bh"
  | R.CH -> "ch"
  | R.DH -> "dh"
  | R.R8 -> "r8"
  | R.R9 -> "r9"
  | R.R10 -> "r10"
  | R.R11 -> "r11"
  | R.R12 -> "r12"
  | R.R13 -> "r13"
  | R.R14 -> "r14"
  | R.R15 -> "r15"
  | R.R8D -> "r8d"
  | R.R9D -> "r9d"
  | R.R10D -> "r10d"
  | R.R11D -> "r11d"
  | R.R12D -> "r12d"
  | R.R13D -> "r13d"
  | R.R14D -> "r14d"
  | R.R15D -> "r15d"
  | R.R8W -> "r8w"
  | R.R9W -> "r8w"
  | R.R10W -> "r10w"
  | R.R11W -> "r11w"
  | R.R12W -> "r12w"
  | R.R13W -> "r13w"
  | R.R14W -> "r14w"
  | R.R15W -> "r15w"
  | R.R8L -> "r8l"
  | R.R9L -> "r9l"
  | R.R10L -> "r10l"
  | R.R11L -> "r11l"
  | R.R12L -> "r12l"
  | R.R13L -> "r13l"
  | R.R14L -> "r14l"
  | R.R15L -> "r15l"
  | R.SPL -> "spl"
  | R.BPL -> "bpl"
  | R.SIL -> "sil"
  | R.DIL -> "dil"
  | R.EIP -> "eip"
  | R.RIP -> "rip"
  | R.ST0 -> "st(0)"
  | R.ST1 -> "st(1)"
  | R.ST2 -> "st(2)"
  | R.ST3 -> "st(3)"
  | R.ST4 -> "st(4)"
  | R.ST5 -> "st(5)"
  | R.ST6 -> "st(6)"
  | R.ST7 -> "st(7)"
  | R.MM0 -> "mm0"
  | R.MM1 -> "mm1"
  | R.MM2 -> "mm2"
  | R.MM3 -> "mm3"
  | R.MM4 -> "mm4"
  | R.MM5 -> "mm5"
  | R.MM6 -> "mm6"
  | R.MM7 -> "mm7"
  | R.XMM0 -> "xmm0"
  | R.XMM1 -> "xmm1"
  | R.XMM2 -> "xmm2"
  | R.XMM3 -> "xmm3"
  | R.XMM4 -> "xmm4"
  | R.XMM5 -> "xmm5"
  | R.XMM6 -> "xmm6"
  | R.XMM7 -> "xmm7"
  | R.XMM8 -> "xmm8"
  | R.XMM9 -> "xmm9"
  | R.XMM10 -> "xmm10"
  | R.XMM11 -> "xmm11"
  | R.XMM12 -> "xmm12"
  | R.XMM13 -> "xmm13"
  | R.XMM14 -> "xmm14"
  | R.XMM15 -> "xmm15"
  | R.YMM0 -> "ymm0"
  | R.YMM1 -> "ymm1"
  | R.YMM2 -> "ymm2"
  | R.YMM3 -> "ymm3"
  | R.YMM4 -> "ymm4"
  | R.YMM5 -> "ymm5"
  | R.YMM6 -> "ymm6"
  | R.YMM7 -> "ymm7"
  | R.YMM8 -> "ymm8"
  | R.YMM9 -> "ymm9"
  | R.YMM10 -> "ymm10"
  | R.YMM11 -> "ymm11"
  | R.YMM12 -> "ymm12"
  | R.YMM13 -> "ymm13"
  | R.YMM14 -> "ymm14"
  | R.YMM15 -> "ymm15"
  | R.ZMM0 -> "zmm0"
  | R.ZMM1 -> "zmm1"
  | R.ZMM2 -> "zmm2"
  | R.ZMM3 -> "zmm3"
  | R.ZMM4 -> "zmm4"
  | R.ZMM5 -> "zmm5"
  | R.ZMM6 -> "zmm6"
  | R.ZMM7 -> "zmm7"
  | R.ZMM8 -> "zmm8"
  | R.ZMM9 -> "zmm9"
  | R.ZMM10 -> "zmm10"
  | R.ZMM11 -> "zmm11"
  | R.ZMM12 -> "zmm12"
  | R.ZMM13 -> "zmm13"
  | R.ZMM14 -> "zmm14"
  | R.ZMM15 -> "zmm15"
  | R.CS -> "cs"
  | R.DS -> "ds"
  | R.SS -> "ss"
  | R.ES -> "es"
  | R.FS -> "fs"
  | R.GS -> "gs"
  | R.CSBase -> "CSBase"
  | R.DSBase -> "DSBase"
  | R.ESBase -> "ESBase"
  | R.FSBase -> "FSBase"
  | R.GSBase -> "GSBase"
  | R.SSBase -> "SSBase"
  | R.CR0 -> "cr0"
  | R.CR2 -> "cr2"
  | R.CR3 -> "cr3"
  | R.CR4 -> "cr4"
  | R.DR0 -> "dr0"
  | R.DR1 -> "dr1"
  | R.DR2 -> "dr2"
  | R.DR3 -> "dr3"
  | R.DR6 -> "dr6"
  | R.DR7 -> "dr7"
  | R.BND0 -> "bnd0"
  | R.BND1 -> "bnd1"
  | R.BND2 -> "bnd2"
  | R.BND3 -> "bnd3"
  | R.OF -> "of"
  | R.DF -> "df"
  | R.IF -> "if"
  | R.TF -> "tf"
  | R.SF -> "sf"
  | R.ZF -> "zf"
  | R.AF -> "af"
  | R.PF -> "pf"
  | R.CF -> "cf"
  | R.K0 -> "k0"
  | R.K1 -> "k1"
  | R.K2 -> "k2"
  | R.K3 -> "k3"
  | R.K4 -> "k4"
  | R.K5 -> "k5"
  | R.K6 -> "k6"
  | R.K7 -> "k7"
  | _ -> "UnknowReg"

let opCodeToString = function
  | Opcode.AAA -> "aaa"
  | Opcode.AAD -> "aad"
  | Opcode.AAM -> "aam"
  | Opcode.AAS -> "aas"
  | Opcode.ADC -> "adc"
  | Opcode.ADD -> "add"
  | Opcode.ADDPD -> "addpd"
  | Opcode.ADDPS -> "addps"
  | Opcode.ADDSD -> "addsd"
  | Opcode.ADDSS -> "addss"
  | Opcode.AND -> "and"
  | Opcode.ANDNPD -> "andnpd"
  | Opcode.ANDNPS -> "andnps"
  | Opcode.ANDPD -> "andpd"
  | Opcode.ANDPS -> "andps"
  | Opcode.ARPL -> "arpl"
  | Opcode.BNDMOV -> "bndmov"
  | Opcode.BOUND -> "bound"
  | Opcode.BSF -> "bsf"
  | Opcode.BSR -> "bsr"
  | Opcode.BSWAP -> "bswap"
  | Opcode.BT -> "bt"
  | Opcode.BTC -> "btc"
  | Opcode.BTR -> "btr"
  | Opcode.BTS -> "bts"
  | Opcode.CALLNear | Opcode.CALLFar -> "call"
  | Opcode.CBW -> "cbw"
  | Opcode.CDQ -> "cdq"
  | Opcode.CDQE -> "cdqe"
  | Opcode.CLAC -> "clac"
  | Opcode.CLC -> "clc"
  | Opcode.CLD -> "cld"
  | Opcode.CLFLUSH -> "clflush"
  | Opcode.CLI -> "cli"
  | Opcode.CLTS -> "clts"
  | Opcode.CMC -> "cmc"
  | Opcode.CMOVA -> "cmova"
  | Opcode.CMOVAE -> "cmovae"
  | Opcode.CMOVB -> "cmovb"
  | Opcode.CMOVBE -> "cmovbe"
  | Opcode.CMOVG -> "cmovg"
  | Opcode.CMOVL -> "cmovl"
  | Opcode.CMOVLE -> "cmovle"
  | Opcode.CMOVGE -> "cmovge"
  | Opcode.CMOVNO -> "cmovno"
  | Opcode.CMOVNP -> "cmovnp"
  | Opcode.CMOVNS -> "cmovns"
  | Opcode.CMOVNZ -> "cmovnz"
  | Opcode.CMOVO -> "cmovo"
  | Opcode.CMOVP -> "cmovp"
  | Opcode.CMOVS -> "cmovs"
  | Opcode.CMOVZ -> "cmovz"
  | Opcode.CMP -> "cmp"
  | Opcode.CMPSB -> "cmpsb"
  | Opcode.CMPSW -> "cmpsw"
  | Opcode.CMPSD -> "cmpsd"
  | Opcode.CMPSQ -> "cmpsq"
  | Opcode.CMPXCH8B -> "cmpxch8b"
  | Opcode.CMPXCHG -> "cmpxchg"
  | Opcode.CMPXCHG16B -> "cmpxchg18b"
  | Opcode.COMISD -> "comisd"
  | Opcode.COMISS -> "comiss"
  | Opcode.CPUID -> "cpuid"
  | Opcode.CQO -> "cqo"
  | Opcode.CRC32 -> "crc32"
  | Opcode.CVTDQ2PD -> "cvtdq2pd"
  | Opcode.CVTDQ2PS -> "cvtdq2ps"
  | Opcode.CVTPD2DQ -> "cvtpd2dq"
  | Opcode.CVTPD2PI -> "cvtpd2pi"
  | Opcode.CVTPD2PS -> "cvtpd2ps"
  | Opcode.CVTPI2PD -> "cvtpi2pd"
  | Opcode.CVTPI2PS -> "cvtpi2ps"
  | Opcode.CVTPS2DQ -> "cvtps2dq"
  | Opcode.CVTPS2PD -> "cvtps2pd"
  | Opcode.CVTPS2PI -> "cvtps2pi"
  | Opcode.CVTSD2SI -> "cvtsd2si"
  | Opcode.CVTSD2SS -> "cvtsd2ss"
  | Opcode.CVTSI2SD -> "cvtsi2sd"
  | Opcode.CVTSI2SS -> "cvtsi2ss"
  | Opcode.CVTSS2SD -> "cvtss2sd"
  | Opcode.CVTSS2SI -> "cvtss2si"
  | Opcode.CVTTPD2DQ -> "cvttpd2dq"
  | Opcode.CVTTPD2PI -> "cvttpd2pi"
  | Opcode.CVTTPS2DQ -> "cvttps2dq"
  | Opcode.CVTTPS2PI -> "cvttps2pi"
  | Opcode.CVTTSD2SI -> "cvttsd2si"
  | Opcode.CVTTSS2SI -> "cvttss2si"
  | Opcode.CWD -> "cwd"
  | Opcode.CWDE -> "cwde"
  | Opcode.DAA -> "daa"
  | Opcode.DAS -> "das"
  | Opcode.DEC -> "dec"
  | Opcode.DIV -> "div"
  | Opcode.DIVPD -> "divpd"
  | Opcode.DIVPS -> "divps"
  | Opcode.DIVSD -> "divsd"
  | Opcode.DIVSS -> "divss"
  | Opcode.ENTER -> "enter"
  | Opcode.F2XM1 -> "fsxm1"
  | Opcode.FABS -> "fabs"
  | Opcode.FADD -> "fadd"
  | Opcode.FADDP -> "faddp"
  | Opcode.FBLD -> "fbld"
  | Opcode.FBSTP -> "fbstp"
  | Opcode.FCHS -> "fchs"
  | Opcode.FCLEX -> "fclex"
  | Opcode.FCMOVB -> "fcmovb"
  | Opcode.FCMOVBE -> "fcmovbe"
  | Opcode.FCMOVE -> "fcmove"
  | Opcode.FCMOVNB -> "fcmovnb"
  | Opcode.FCMOVNBE -> "fcmovnbe"
  | Opcode.FCMOVNE -> "fcmovne"
  | Opcode.FCMOVNU -> "fcmovnu"
  | Opcode.FCMOVU -> "fcmovu"
  | Opcode.FCOM -> "fcom"
  | Opcode.FCOMI -> "fcomi"
  | Opcode.FCOMIP -> "fcomip"
  | Opcode.FCOMP -> "fcomp"
  | Opcode.FCOMPP -> "fcompp"
  | Opcode.FCOS -> "fcos"
  | Opcode.FDECSTP -> "fdecstp"
  | Opcode.FDIV -> "fdiv"
  | Opcode.FDIVP -> "fdivp"
  | Opcode.FDIVR -> "fdivr"
  | Opcode.FDIVRP -> "fdivrp"
  | Opcode.FFREE -> "ffree"
  | Opcode.FIADD -> "fiadd"
  | Opcode.FILD -> "fild"
  | Opcode.FIMUL -> "fimul"
  | Opcode.FINCSTP -> "fincstp"
  | Opcode.FINIT -> "finit"
  | Opcode.FICOM -> "ficom"
  | Opcode.FICOMP -> "ficomp"
  | Opcode.FIST -> "fist"
  | Opcode.FISTP -> "fistp"
  | Opcode.FISTTP -> "fisttp"
  | Opcode.FISUB -> "fisub"
  | Opcode.FISUBR -> "fisubr"
  | Opcode.FIDIV -> "fidiv"
  | Opcode.FIDIVR -> "fidivr"
  | Opcode.FLD -> "fld"
  | Opcode.FLD1 -> "fld1"
  | Opcode.FLDCW -> "fldcw"
  | Opcode.FLDENV -> "fldenv"
  | Opcode.FLDL2T -> "fldl2t"
  | Opcode.FLDL2E -> "fldl2e"
  | Opcode.FLDPI -> "fldpi"
  | Opcode.FLDLG2 -> "fldlg2"
  | Opcode.FLDLN2 -> "fldln2"
  | Opcode.FLDZ  -> "fldz"
  | Opcode.FNOP -> "fnop"
  | Opcode.FMUL -> "fmul"
  | Opcode.FMULP -> "fmulp"
  | Opcode.FPATAN -> "fpatan"
  | Opcode.FPREM -> "fprem"
  | Opcode.FPREM1 -> "fprem1"
  | Opcode.FPTAN -> "fptan"
  | Opcode.FRNDINT -> "frndint"
  | Opcode.FRSTOR -> "frstor"
  | Opcode.FSAVE -> "fsave"
  | Opcode.FSCALE -> "fscale"
  | Opcode.FSIN -> "fsin"
  | Opcode.FSINCOS -> "fsincos"
  | Opcode.FSQRT -> "fsqrt"
  | Opcode.FST -> "fst"
  | Opcode.FSTCW -> "fstcw"
  | Opcode.FSTENV -> "fstenv"
  | Opcode.FSTP -> "fstp"
  | Opcode.FSTSW -> "fstsw"
  | Opcode.FSUB -> "fsub"
  | Opcode.FSUBP -> "fsubp"
  | Opcode.FSUBR -> "fsubr"
  | Opcode.FSUBRP -> "fsubrp"
  | Opcode.FTST -> "ftst"
  | Opcode.FUCOM -> "fucom"
  | Opcode.FUCOMI -> "fucomi"
  | Opcode.FUCOMIP -> "fucomip"
  | Opcode.FUCOMP -> "fucomp"
  | Opcode.FUCOMPP -> "fucompp"
  | Opcode.FXAM -> "fxam"
  | Opcode.FXCH -> "fxch"
  | Opcode.FXTRACT -> "fxtract"
  | Opcode.FYL2X -> "fyl2x"
  | Opcode.FYL2XP1 -> "fyl2xp1"
  | Opcode.FXRSTOR -> "fxrstor"
  | Opcode.FXRSTOR64 -> "fxrstor64"
  | Opcode.FXSAVE -> "fxsave"
  | Opcode.FXSAVE64 -> "fxsave64"
  | Opcode.GETSEC -> "getsec"
  | Opcode.HLT -> "hlt"
  | Opcode.IDIV -> "idiv"
  | Opcode.IMUL -> "imul"
  | Opcode.IN -> "in"
  | Opcode.INC -> "inc"
  | Opcode.INS -> "ins"
  | Opcode.INSB -> "insb"
  | Opcode.INSD -> "insd"
  | Opcode.INSW -> "insw"
  | Opcode.INT -> "int"
  | Opcode.INT3 -> "int3"
  | Opcode.INTO -> "into"
  | Opcode.INVD -> "invd"
  | Opcode.INVLPG -> "invlpg"
  | Opcode.IRETW -> "iretw"
  | Opcode.IRETD -> "iretd"
  | Opcode.IRETQ -> "iretq"
  | Opcode.JA -> "ja"
  | Opcode.JB -> "jb"
  | Opcode.JBE -> "jbe"
  | Opcode.JCXZ -> "jcxz"
  | Opcode.JECXZ -> "jecxz"
  | Opcode.JG -> "jg"
  | Opcode.JL -> "jl"
  | Opcode.JLE -> "jle"
  | Opcode.JMPNear | Opcode.JMPFar -> "jmp"
  | Opcode.JNB -> "jnb"
  | Opcode.JNL -> "jnl"
  | Opcode.JNO -> "jno"
  | Opcode.JNP -> "jnp"
  | Opcode.JNS -> "jns"
  | Opcode.JNZ -> "jnz"
  | Opcode.JO -> "jo"
  | Opcode.JP -> "jp"
  | Opcode.JRCXZ -> "jrcxz"
  | Opcode.JS -> "js"
  | Opcode.JZ -> "jz"
  | Opcode.LAHF -> "lahf"
  | Opcode.LAR -> "lar"
  | Opcode.LDMXCSR -> "ldmxcsr"
  | Opcode.LDS -> "lds"
  | Opcode.LDDQU -> "lddqu"
  | Opcode.LEA -> "lea"
  | Opcode.LEAVE -> "leave"
  | Opcode.LES -> "les"
  | Opcode.LFENCE -> "lfence"
  | Opcode.LFS -> "lfs"
  | Opcode.LGDT -> "lgdt"
  | Opcode.LGS -> "lgs"
  | Opcode.LIDT -> "lidt"
  | Opcode.LLDT -> "lldt"
  | Opcode.LMSW -> "lmsw"
  | Opcode.LODSB -> "lodsb"
  | Opcode.LODSW -> "lodsw"
  | Opcode.LODSD -> "lodsd"
  | Opcode.LODSQ -> "lodsq"
  | Opcode.LOOP -> "loop"
  | Opcode.LOOPE -> "loope"
  | Opcode.LOOPNE -> "loopne"
  | Opcode.LSL -> "lsl"
  | Opcode.LSS -> "lss"
  | Opcode.LTR -> "ltr"
  | Opcode.LZCNT -> "lzcnt"
  | Opcode.MAXPS -> "maxps"
  | Opcode.MAXPD -> "maxpd"
  | Opcode.MAXSD -> "maxsd"
  | Opcode.MAXSS -> "maxss"
  | Opcode.MFENCE -> "mfence"
  | Opcode.MINPD -> "minpd"
  | Opcode.MINPS -> "minps"
  | Opcode.MINSD -> "minsd"
  | Opcode.MINSS -> "minss"
  | Opcode.MONITOR -> "monitor"
  | Opcode.MOV -> "mov"
  | Opcode.MOVAPD -> "movapd"
  | Opcode.MOVAPS -> "movaps"
  | Opcode.MOVBE -> "movbe"
  | Opcode.MOVD -> "movd"
  | Opcode.MOVDDUP -> "movddup"
  | Opcode.MOVDQ2Q -> "movdq2q"
  | Opcode.MOVDQA -> "movdqa"
  | Opcode.MOVDQU -> "movdqu"
  | Opcode.MOVHLPS -> "movhlps"
  | Opcode.MOVHPD -> "movhpd"
  | Opcode.MOVHPS -> "movhps"
  | Opcode.MOVLHPS -> "movlhps"
  | Opcode.MOVLPD -> "movlpd"
  | Opcode.MOVLPS -> "movlps"
  | Opcode.MOVMSKPD -> "movmskpd"
  | Opcode.MOVMSKPS -> "movmskps"
  | Opcode.MOVNTDQ -> "movntdq"
  | Opcode.MOVNTI -> "movnti"
  | Opcode.MOVNTPD -> "movntpd"
  | Opcode.MOVNTPS -> "movntps"
  | Opcode.MOVNTQ -> "movntq"
  | Opcode.MOVQ -> "movq"
  | Opcode.MOVQ2DQ -> "movq2dq"
  | Opcode.MOVSB -> "movsb"
  | Opcode.MOVSD -> "movsd"
  | Opcode.MOVSHDUP -> "movshdup"
  | Opcode.MOVSLDUP -> "movsldup"
  | Opcode.MOVSS -> "movss"
  | Opcode.MOVSW -> "movsw"
  | Opcode.MOVSQ -> "movsq"
  | Opcode.MOVSX -> "movsx"
  | Opcode.MOVSXD -> "movsxd"
  | Opcode.MOVUPD -> "movupd"
  | Opcode.MOVUPS -> "movups"
  | Opcode.MOVZX -> "movzx"
  | Opcode.MUL -> "mul"
  | Opcode.MULPD -> "mulpd"
  | Opcode.MULPS -> "mulps"
  | Opcode.MULSD -> "mulsd"
  | Opcode.MULSS -> "mulss"
  | Opcode.MWAIT -> "mwait"
  | Opcode.NEG -> "neg"
  | Opcode.NOP -> "nop"
  | Opcode.NOT -> "not"
  | Opcode.OR -> "or"
  | Opcode.ORPD -> "orpd"
  | Opcode.ORPS -> "orps"
  | Opcode.OUT -> "out"
  | Opcode.OUTS -> "outs"
  | Opcode.OUTSB -> "outsb"
  | Opcode.OUTSD -> "outsd"
  | Opcode.OUTSW -> "outsw"
  | Opcode.PACKSSDW -> "packssdw"
  | Opcode.PACKSSWB -> "packsswb"
  | Opcode.PACKUSWB -> "packuswb"
  | Opcode.PADDB -> "paddb"
  | Opcode.PADDD -> "paddd"
  | Opcode.PADDQ -> "paddq"
  | Opcode.PADDSB -> "paddsb"
  | Opcode.PADDSW -> "paddsw"
  | Opcode.PADDUSB -> "paddusb"
  | Opcode.PADDUSW -> "paddusw"
  | Opcode.PADDW -> "paddw"
  | Opcode.PALIGNR -> "palignr"
  | Opcode.PAND -> "pand"
  | Opcode.PANDN -> "pandn"
  | Opcode.PAVGB -> "pavgb"
  | Opcode.PAVGW -> "pavgw"
  | Opcode.PAUSE -> "pause"
  | Opcode.PCMPEQB -> "pcmpeqb"
  | Opcode.PCMPEQD -> "pcmpeqd"
  | Opcode.PCMPEQQ -> "pcmpeqq"
  | Opcode.PCMPESTRI -> "pcmpestri"
  | Opcode.PCMPESTRM -> "pcmpestrm"
  | Opcode.PCMPGTB -> "pcmpgtb"
  | Opcode.PCMPGTD -> "pcmpgtd"
  | Opcode.PCMPGTW -> "pcmpgtw"
  | Opcode.PCMPISTRI -> "pcmpistri"
  | Opcode.PCMPISTRM -> "pcmpistrm"
  | Opcode.PEXTRW -> "pextrw"
  | Opcode.PINSRB -> "pinsrb"
  | Opcode.PINSRW -> "pinsrw"
  | Opcode.PMADDWD -> "pmaddwd"
  | Opcode.PMAXSW -> "pmaxsw"
  | Opcode.PMAXUB -> "pmaxub"
  | Opcode.PMINSW -> "pminsw"
  | Opcode.PMINUB -> "pminub"
  | Opcode.PMINUD -> "pminud"
  | Opcode.PMINSB -> "pminsb"
  | Opcode.PMOVMSKB -> "pmovmskb"
  | Opcode.PMULHUW -> "pmulhuw"
  | Opcode.PMULHW -> "pmulhw"
  | Opcode.PMULLW -> "pmullw"
  | Opcode.PMULUDQ -> "pmuludq"
  | Opcode.POP -> "pop"
  | Opcode.POPA -> "popa"
  | Opcode.POPAD -> "popad"
  | Opcode.POPCNT -> "popcnt"
  | Opcode.POPF -> "popf"
  | Opcode.POPFD -> "popfd"
  | Opcode.POPFQ -> "popfq"
  | Opcode.POR -> "por"
  | Opcode.PREFETCHNTA -> "prefetchnta"
  | Opcode.PREFETCHT0 -> "prefetcht0"
  | Opcode.PREFETCHT1 -> "prefetcht1"
  | Opcode.PREFETCHT2 -> "prefetcht2"
  | Opcode.PREFETCHW -> "prefetchw"
  | Opcode.PREFETCHWT1 -> "prefetchwt1"
  | Opcode.PSADBW -> "psadw"
  | Opcode.PSHUFB -> "pshufb"
  | Opcode.PSHUFD -> "pshufd"
  | Opcode.PSHUFHW -> "pshufhw"
  | Opcode.PSHUFLW -> "pshuflw"
  | Opcode.PSHUFW -> "pshufw"
  | Opcode.PSLLD -> "pslld"
  | Opcode.PSLLDQ -> "pslldq"
  | Opcode.PSLLQ -> "psllq"
  | Opcode.PSLLW -> "psllw"
  | Opcode.PSRAD-> "psrad"
  | Opcode.PSRAW -> "psraw"
  | Opcode.PSRLD -> "psrld"
  | Opcode.PSRLDQ -> "psrldq"
  | Opcode.PSRLQ -> "psrlq"
  | Opcode.PSRLW -> "psrlw"
  | Opcode.PSUBB -> "psubb"
  | Opcode.PSUBD -> "psubd"
  | Opcode.PSUBQ -> "psubq"
  | Opcode.PSUBSB -> "psubsb"
  | Opcode.PSUBSW -> "psubsw"
  | Opcode.PSUBUSB -> "psubusb"
  | Opcode.PSUBUSW -> "psubusw"
  | Opcode.PSUBW -> "psubw"
  | Opcode.PTEST -> "ptest"
  | Opcode.PUNPCKHBW -> "punpckhbw"
  | Opcode.PUNPCKHDQ -> "punpckhdq"
  | Opcode.PUNPCKHQDQ -> "punpckhqdq"
  | Opcode.PUNPCKHWD -> "punpckhwd"
  | Opcode.PUNPCKLBW -> "punpcklbw"
  | Opcode.PUNPCKLDQ -> "punpckldq"
  | Opcode.PUNPCKLQDQ -> "punpcklqdq"
  | Opcode.PUNPCKLWD -> "punpcklwd"
  | Opcode.PUSH -> "push"
  | Opcode.PUSHA -> "pusha"
  | Opcode.PUSHAD -> "pushad"
  | Opcode.PUSHF -> "pushf"
  | Opcode.PUSHFD -> "pushfd"
  | Opcode.PUSHFQ -> "pushfq"
  | Opcode.PXOR -> "pxor"
  | Opcode.RCL -> "rcl"
  | Opcode.RCR -> "rcr"
  | Opcode.RDFSBASE -> "rdfsbase"
  | Opcode.RDGSBASE -> "rdgsbase"
  | Opcode.RDMSR -> "rdmsr"
  | Opcode.RDPKRU -> "rdpkru"
  | Opcode.RDPMC -> "rdpmc"
  | Opcode.RDRAND -> "rdrand"
  | Opcode.RDSEED -> "rdseed"
  | Opcode.RDTSC -> "rdtsc"
  | Opcode.RDTSCP -> "rdtscp"
  | Opcode.RETNear | Opcode.RETNearImm
  | Opcode.RETFar | Opcode.RETFarImm -> "ret"
  | Opcode.ROL -> "rol"
  | Opcode.ROR -> "ror"
  | Opcode.ROUNDSD -> "roundsd"
  | Opcode.RSM -> "rsm"
  | Opcode.SAHF -> "sahf"
  | Opcode.SAR -> "sar"
  | Opcode.SBB -> "sbb"
  | Opcode.SCASB -> "scasb"
  | Opcode.SCASW -> "scasw"
  | Opcode.SCASD -> "scasd"
  | Opcode.SCASQ -> "scasq"
  | Opcode.SETA -> "seta"
  | Opcode.SETB -> "setb"
  | Opcode.SETBE -> "setbe"
  | Opcode.SETG -> "setnle"
  | Opcode.SETL -> "setl"
  | Opcode.SETLE -> "setle"
  | Opcode.SETNB -> "setnb"
  | Opcode.SETNL -> "setnl"
  | Opcode.SETNO -> "setno"
  | Opcode.SETNP -> "setnp"
  | Opcode.SETNS -> "setns"
  | Opcode.SETNZ -> "setnz"
  | Opcode.SETO -> "seto"
  | Opcode.SETP -> "setp"
  | Opcode.SETS -> "sets"
  | Opcode.SETZ -> "setz"
  | Opcode.SFENCE -> "sfence"
  | Opcode.SGDT -> "sgdt"
  | Opcode.SHL -> "shl"
  | Opcode.SHLD -> "shld"
  | Opcode.SHR -> "shr"
  | Opcode.SHRD -> "shrd"
  | Opcode.SHUFPD -> "shufpd"
  | Opcode.SHUFPS -> "shufps"
  | Opcode.SIDT -> "sidt"
  | Opcode.SLDT -> "sldt"
  | Opcode.SMSW -> "smsw"
  | Opcode.STAC -> "stac"
  | Opcode.STC -> "stc"
  | Opcode.STD -> "std"
  | Opcode.STI -> "sti"
  | Opcode.STMXCSR -> "stmxcsr"
  | Opcode.STOSB -> "stosb"
  | Opcode.STOSW -> "stosw"
  | Opcode.STOSD -> "stosd"
  | Opcode.STOSQ -> "stosq"
  | Opcode.STR -> "str"
  | Opcode.SUB -> "sub"
  | Opcode.SUBPD -> "subpd"
  | Opcode.SUBPS -> "subps"
  | Opcode.SUBSD -> "subsd"
  | Opcode.SUBSS -> "subss"
  | Opcode.SWAPGS -> "swapgs"
  | Opcode.SYSCALL -> "syscall"
  | Opcode.SYSENTER -> "sysenter"
  | Opcode.SYSEXIT -> "sysexit"
  | Opcode.SYSRET -> "sysret"
  | Opcode.TEST -> "test"
  | Opcode.TZCNT -> "tzcnt"
  | Opcode.UCOMISD -> "ucomisd"
  | Opcode.UCOMISS -> "ucomiss"
  | Opcode.UD2 -> "ud2"
  | Opcode.UNPCKHPD -> "unpckhpd"
  | Opcode.UNPCKHPS -> "unpckhps"
  | Opcode.UNPCKLPD -> "unpcklpd"
  | Opcode.UNPCKLPS -> "unpcklps"
  | Opcode.VADDPD -> "vaddpd"
  | Opcode.VADDPS -> "vaddps"
  | Opcode.VADDSD -> "vaddsd"
  | Opcode.VADDSS -> "vaddss"
  | Opcode.VANDPD -> "vandpd"
  | Opcode.VANDPS -> "vandps"
  | Opcode.VBROADCASTSS -> "vbroadcastss"
  | Opcode.VCOMISD -> "vcomisd"
  | Opcode.VCOMISS -> "vcomiss"
  | Opcode.VCVTSD2SI -> "vcvtsd2si"
  | Opcode.VCVTSI2SD -> "vcvtsi2sd"
  | Opcode.VCVTSI2SS -> "vcvtsi2ss"
  | Opcode.VCVTSS2SI -> "vcvtss2si"
  | Opcode.VCVTTSD2SI -> "vcvttsd2si"
  | Opcode.VCVTTSS2SI -> "vcvttss2si"
  | Opcode.VDIVPD -> "vdivpd"
  | Opcode.VDIVPS -> "vdivps"
  | Opcode.VDIVSD -> "vdivsd"
  | Opcode.VDIVSS -> "vdivss"
  | Opcode.VERR -> "verr"
  | Opcode.VERW -> "verw"
  | Opcode.VINSERTI128 -> "vinserti128"
  | Opcode.VLDDQU -> "vlddqu"
  | Opcode.VMCALL -> "vmcall"
  | Opcode.VMCLEAR -> "vmclear"
  | Opcode.VMFUNC -> "vmfunc"
  | Opcode.VMLAUNCH -> "vmlaunch"
  | Opcode.VMOVAPD -> "vmovapd"
  | Opcode.VMOVAPS -> "vmovaps"
  | Opcode.VMOVD -> "vmovd"
  | Opcode.VMOVDDUP -> "vmovddup"
  | Opcode.VMOVDQA -> "vmovdqa"
  | Opcode.VMOVDQA32 -> "vmovdqa32"
  | Opcode.VMOVDQA64 -> "vmovdqa64"
  | Opcode.VMOVDQU32 -> "vmovdqu32"
  | Opcode.VMOVDQU64 -> "vmovdqu64"
  | Opcode.VMOVDQU -> "vmovdqu"
  | Opcode.VMOVHLPS -> "vmovhlps"
  | Opcode.VMOVHPD -> "vmovhpd"
  | Opcode.VMOVHPS -> "vmovhps"
  | Opcode.VMOVLHPS -> "vmovlhps"
  | Opcode.VMOVLPD -> "vmovlpd"
  | Opcode.VMOVLPS -> "vmovlps"
  | Opcode.VMOVMSKPD -> "vmovmskpd"
  | Opcode.VMOVMSKPS -> "vmovmskps"
  | Opcode.VMOVNTDQ -> "vmovntdq"
  | Opcode.VMOVNTPD -> "vmovntpd"
  | Opcode.VMOVNTPS -> "vmovntps"
  | Opcode.VMOVQ -> "vmovq"
  | Opcode.VMOVSD -> "vmovsd"
  | Opcode.VMOVSHDUP -> "vmovshdup"
  | Opcode.VMOVSLDUP -> "vmovsldup"
  | Opcode.VMOVSS -> "vmovss"
  | Opcode.VMOVUPD -> "vmovupd"
  | Opcode.VMOVUPS -> "vmovups"
  | Opcode.VMPTRLD -> "vmptrld"
  | Opcode.VMPTRST -> "vmptrst"
  | Opcode.VMULPD -> "vmulpd"
  | Opcode.VMULPS -> "vmulps"
  | Opcode.VMULSD -> "vmulsd"
  | Opcode.VMULSS -> "vmulss"
  | Opcode.VMRESUME -> "vmresume"
  | Opcode.VMXOFF -> "vmxoff"
  | Opcode.VMXON -> "vmxon"
  | Opcode.VORPD -> "vorpd"
  | Opcode.VORPS -> "vorps"
  | Opcode.VPACKSSDW -> "vpackssdw"
  | Opcode.VPACKSSWB -> "vpacksswb"
  | Opcode.VPACKUSWB -> "vpackuswb"
  | Opcode.VPADDB -> "vpaddb"
  | Opcode.VPADDD -> "vpaddd"
  | Opcode.VPADDQ -> "vpaddq"
  | Opcode.VPADDSB -> "vpaddsb"
  | Opcode.VPADDSW -> "vpaddsw"
  | Opcode.VPADDUSB -> "vpaddusb"
  | Opcode.VPADDUSW -> "vpaddusw"
  | Opcode.VPADDW -> "vpaddw"
  | Opcode.VPALIGNR -> "vpalignr"
  | Opcode.VPAND -> "vpand"
  | Opcode.VPANDN -> "vpandn"
  | Opcode.VPAVGB -> "vpavgb"
  | Opcode.VPAVGW -> "vpavgw"
  | Opcode.VPBROADCASTB -> "vpbroadcastb"
  | Opcode.VPCMPEQB -> "vpcmpeqb"
  | Opcode.VPCMPEQD -> "vpcmpeqd"
  | Opcode.VPCMPEQQ -> "vpcmpeqq"
  | Opcode.VPCMPESTRI -> "vpcmpestri"
  | Opcode.VPCMPESTRM -> "vpcmpestrm"
  | Opcode.VPCMPGTB -> "vpcmpgtb"
  | Opcode.VPCMPGTD -> "vpcmpgtd"
  | Opcode.VPCMPGTW -> "vpcmpgtw"
  | Opcode.VPCMPISTRI -> "vpcmpistri"
  | Opcode.VPCMPISTRM -> "vpcmpistrm"
  | Opcode.VPEXTRW -> "vpextrw"
  | Opcode.VPINSRB -> "vpinsrb"
  | Opcode.VPINSRW -> "vpinsrw"
  | Opcode.VPMADDWD -> "vpmaddwd"
  | Opcode.VPMAXSW -> "vpmaxsw"
  | Opcode.VPMAXUB -> "vpmaxub"
  | Opcode.VPMINSW -> "vpminsw"
  | Opcode.VPMINUB -> "vpminub"
  | Opcode.VPMINUD -> "vpminud"
  | Opcode.VPMOVMSKB -> "vpmovmskb"
  | Opcode.VPMULHUW -> "vpmulhuw"
  | Opcode.VPMULHW -> "vpmulhw"
  | Opcode.VPMULLW -> "vpmullw"
  | Opcode.VPMULUDQ -> "vpmuludq"
  | Opcode.VPOR -> "vpor"
  | Opcode.VPSADBW -> "vpsadw"
  | Opcode.VPSHUFB -> "vpshufb"
  | Opcode.VPSHUFD -> "vpshufd"
  | Opcode.VPSHUFHW -> "vpshufhw"
  | Opcode.VPSHUFLW -> "vpshuflw"
  | Opcode.VPSLLD -> "vpslld"
  | Opcode.VPSLLDQ -> "vpslldq"
  | Opcode.VPSLLQ -> "vpsllq"
  | Opcode.VPSLLW -> "vpsllw"
  | Opcode.VPSRAD -> "vpsrad"
  | Opcode.VPSRAW -> "vpsraw"
  | Opcode.VPSRLD -> "vpsrld"
  | Opcode.VPSRLDQ -> "vpsrldq"
  | Opcode.VPSRLQ -> "vpsrlq"
  | Opcode.VPSRLW -> "vpsrlw"
  | Opcode.VPSUBB -> "vpsubb"
  | Opcode.VPSUBD -> "vpsubd"
  | Opcode.VPSUBQ -> "vpsubq"
  | Opcode.VPSUBSB -> "vpsubsb"
  | Opcode.VPSUBSW -> "vpsubsw"
  | Opcode.VPSUBUSB -> "vpsubusb"
  | Opcode.VPSUBUSW -> "vpsubusw"
  | Opcode.VPSUBW -> "vpsubw"
  | Opcode.VPTEST -> "vptest"
  | Opcode.VPUNPCKHBW -> "vpunpckhbw"
  | Opcode.VPUNPCKHDQ -> "vpunpckhdq"
  | Opcode.VPUNPCKHQDQ -> "vpunpckhqdq"
  | Opcode.VPUNPCKHWD -> "vpunpckhwd"
  | Opcode.VPUNPCKLBW -> "vpunpcklbw"
  | Opcode.VPUNPCKLDQ -> "vpunpckldq"
  | Opcode.VPUNPCKLQDQ -> "vpunpcklqdq"
  | Opcode.VPUNPCKLWD -> "vpunpcklwd"
  | Opcode.VPXOR -> "vpxor"
  | Opcode.VSHUFPD -> "vshufpd"
  | Opcode.VSHUFPS -> "vshufps"
  | Opcode.VSUBPD -> "vsubpd"
  | Opcode.VSUBPS -> "vsubps"
  | Opcode.VSUBSD -> "vsubsd"
  | Opcode.VSUBSS -> "vsubss"
  | Opcode.VUCOMISD -> "vucomisd"
  | Opcode.VUCOMISS -> "vucomiss"
  | Opcode.VUNPCKHPD -> "vunpckhpd"
  | Opcode.VUNPCKHPS -> "vunpckhps"
  | Opcode.VUNPCKLPD -> "vunpcklpd"
  | Opcode.VUNPCKLPS -> "vunpcklps"
  | Opcode.VXORPD -> "vxorpd"
  | Opcode.VXORPS -> "vxorps"
  | Opcode.VZEROUPPER -> "vzeroupper"
  | Opcode.WAIT -> "wait"
  | Opcode.WBINVD -> "wbinvd"
  | Opcode.WRFSBASE -> "wrfsbase"
  | Opcode.WRGSBASE -> "wrgsbase"
  | Opcode.WRMSR -> "wrmsr"
  | Opcode.WRPKRU -> "wrpkru"
  | Opcode.XABORT -> "xabort"
  | Opcode.XADD -> "xadd"
  | Opcode.XBEGIN -> "xbegin"
  | Opcode.XCHG -> "xchg"
  | Opcode.XEND -> "xend"
  | Opcode.XGETBV -> "xgetbv"
  | Opcode.XLATB -> "xlatb"
  | Opcode.XOR -> "xor"
  | Opcode.XORPD -> "xorpd"
  | Opcode.XORPS -> "xorps"
  | Opcode.XRSTOR -> "xrstor"
  | Opcode.XSAVE -> "xsave"
  | Opcode.XSAVEOPT -> "xsaveopt"
  | Opcode.XSETBV -> "xsetbv"
  | Opcode.XTEST -> "xtest"
  | _ -> failwith "Unknown opcode encountered."

let inline private iToHexStr (i: int64) (sb: StringBuilder) =
  sb.Append("0x").Append(i.ToString("X"))

let inline private uToHexStr (i: uint64) (sb: StringBuilder) =
  sb.Append("0x").Append(i.ToString("X"))

let inline printAddr (addr: Addr) wordSize verbose (sb: StringBuilder) =
  if not verbose then sb
  else
    if wordSize = WordSize.Bit32 then sb.Append(addr.ToString("X8")).Append(": ")
    else sb.Append(addr.ToString("X16")).Append(": ")

let inline private ptrDirectiveString isFar = function
  | 1 -> "byte ptr"
  | 2 -> "word ptr"
  | 4 -> if isFar then "word far ptr" else "dword ptr"
  | 6 -> "dword far ptr"
  | 8 -> "qword ptr"
  | 10 -> if isFar then "qword far ptr" else "tword ptr"
  | 16 -> "xmmword ptr"
  | 32 -> "ymmword ptr"
  | 64 -> "zmmword ptr"
  | _ -> failwith "Invalid ptr attribute"

let inline dispToString showSign wordSz (disp: Disp) (sb: StringBuilder) =
  let mask = WordSize.toRegType wordSz |> RegType.getMask |> uint64
  if showSign && disp < 0L then sb.Append("-") |> iToHexStr (- disp)
  elif showSign then sb.Append("+") |> iToHexStr disp
  else uToHexStr (uint64 disp &&& mask) sb

let inline private memDispToStr showSign disp wordSz (sb: StringBuilder) =
  match disp with
  | None -> sb
  | Some d -> dispToString showSign wordSz d sb

let inline scaleToString (scale: Scale) (sb: StringBuilder) =
  if scale = Scale.X1 then sb
  else sb.Append("*").Append((int scale).ToString())

let inline private memScaleDispToStr emptyBase si d wordSz (sb: StringBuilder) =
  match si with
  | None -> memDispToStr (not emptyBase) d wordSz sb
  | Some (i, scale) ->
    let sb = if emptyBase then sb else sb.Append("+")
    let sb = sb.Append(regToStr i) |> scaleToString scale
    memDispToStr true d wordSz sb

let private memAddrToStr b si disp wordSz (sb: StringBuilder) =
  match b with
  | None -> memScaleDispToStr true si disp wordSz sb
  | Some b -> memScaleDispToStr false si disp wordSz (sb.Append(regToStr b))

let mToString wordSz (ins: InsInfo) b si d oprSz (sb: StringBuilder) =
  let isFar = match ins.Opcode with
              | Opcode.JMPFar | Opcode.CALLFar -> true
              | _ -> false
  let ptrDirective = RegType.toByteWidth oprSz |> ptrDirectiveString isFar
  let sb = sb.Append(ptrDirective).Append(" [")
  match Helper.getSegment ins.Prefixes with
  | None -> (memAddrToStr b si d wordSz sb).Append("]")
  | Some s -> let sb = sb.Append(regToStr s).Append(":")
              (memAddrToStr b si d wordSz sb).Append("]")

let inline relToString pc offset (fi: FileInfo option) (sb: StringBuilder) =
  let sb = if offset < 0L then sb.Append("-") else sb.Append("+")
  let sb = iToHexStr (abs offset) sb
  let targetAddr = pc + uint64 offset
  match fi with
  | Some fi ->
    match fi.TryFindFunctionSymbolName (targetAddr) with
    | false, _ -> sb.Append(" ; ") |> uToHexStr targetAddr
    | true, "" -> sb // XXX how is this possible?
    | true, name -> sb.Append(" ; <").Append(name).Append(">")
  | None -> sb.Append(" ; ") |> uToHexStr targetAddr

let inline absToString selector (offset: Addr) _sz (sb: StringBuilder) =
  (uToHexStr (uint64 selector) sb).Append(":")
  |> uToHexStr offset

let getOpmaskRegister = function
  | 0x0uy -> Register.K0
  | 0x1uy -> Register.K1
  | 0x2uy -> Register.K2
  | 0x3uy -> Register.K3
  | 0x4uy -> Register.K4
  | 0x5uy -> Register.K5
  | 0x6uy -> Register.K6
  | 0x7uy -> Register.K7
  | _ -> raise InvalidRegisterException

/// Zeroing/Merging (EVEX.z)
let maskZtoString ev (sb: StringBuilder) =
  if ev.Z = Zeroing then sb else sb.Append ("{z}")

/// Opmask register
let maskRegToString ePrx (sb: StringBuilder) =
  if ePrx.AAA = 0uy then sb
  else let k = getOpmaskRegister ePrx.AAA |> regToStr
       sb.Append(" {").Append(k).Append("}")

let maskToString vPrx sb =
 match vPrx.EVEXPrx with
 | None -> sb
 | Some ePrx -> maskRegToString ePrx sb |> maskZtoString ePrx

let maskingToString (ins: InsInfo) (sb: StringBuilder) =
  match ins.VEXInfo with
  | None -> sb
  | Some v -> maskToString v sb

let oprToString wordSz ins insAddr fi opr isFstOpr (sb: StringBuilder) =
  match opr with
  | OprReg reg -> let sb = sb.Append(regToStr reg)
                  if isFstOpr then maskingToString ins sb else sb
  | OprMem (b, si, disp, oprSz) ->
    let sb = mToString wordSz ins b si disp oprSz sb
    if isFstOpr then maskingToString ins sb else sb
  | OprImm imm -> iToHexStr imm sb
  | OprDirAddr (Absolute (sel, offset, sz)) -> absToString sel offset sz sb
  | OprDirAddr (Relative (offset)) -> relToString insAddr offset fi sb

let inline printPref (prefs: Prefix) (sb: StringBuilder) =
  if (prefs &&& Prefix.PrxLOCK) <> Prefix.PrxNone then sb.Append("lock ")
  elif (prefs &&& Prefix.PrxREPNZ) <> Prefix.PrxNone then sb.Append("repnz ")
  elif (prefs &&& Prefix.PrxREPZ) <> Prefix.PrxNone then sb.Append("repz ")
  else sb

let inline printOpcode opcode (sb: StringBuilder) =
  sb.Append(opCodeToString opcode)

let recomputeRIPRel pc disp (ins: InsInfo) (insLen: uint32) (sb: StringBuilder) =
  let oprSize = RegType.toByteWidth ins.InsSize.OperationSize
  let dir = ptrDirectiveString false oprSize
  let sb = sb.Append(dir).Append(" [")
  let sb = uToHexStr (pc + uint64 disp + uint64 insLen) sb
  sb.Append("]")

let printOprs ins insAddr insLen fi pc wordSz (sb: StringBuilder) =
  match ins.Operands with
  | NoOperand -> sb
  | OneOperand opr ->
    oprToString wordSz ins insAddr fi opr true (sb.Append(" "))
  | TwoOperands (OprMem (Some R.RIP, None, Some disp, _), opr) ->
    (recomputeRIPRel pc disp ins insLen (sb.Append(" "))).Append(", ")
    |> oprToString wordSz ins insAddr fi opr false
  | TwoOperands (opr, OprMem (Some R.RIP, None, Some disp, _)) ->
    (oprToString wordSz ins insAddr fi opr true (sb.Append(" "))).Append(", ")
    |> recomputeRIPRel pc disp ins insLen
  | TwoOperands (opr1, opr2) ->
    (oprToString wordSz ins insAddr fi opr1 true (sb.Append(" "))).Append(", ")
    |> oprToString wordSz ins insAddr fi opr2 false
  | ThreeOperands (opr1, opr2, opr3) ->
    let sb = oprToString wordSz ins insAddr fi opr1 true (sb.Append(" "))
    let sb = oprToString wordSz ins insAddr fi opr2 false (sb.Append(", "))
    oprToString wordSz ins insAddr fi opr3 false (sb.Append(", "))
  | FourOperands (opr1, opr2, opr3, opr4) ->
    let sb = oprToString wordSz ins insAddr fi opr1 true (sb.Append(" "))
    let sb = oprToString wordSz ins insAddr fi opr2 false (sb.Append(", "))
    let sb = oprToString wordSz ins insAddr fi opr3 false (sb.Append(", "))
    oprToString wordSz ins insAddr fi opr4 false (sb.Append(", "))

let disasm showAddr wordSize fi ins insAddr insLen =
  let pc = insAddr
  let sb = StringBuilder ()
  let sb = printAddr pc wordSize showAddr sb
  let sb = printPref ins.Prefixes sb
  let sb = printOpcode ins.Opcode sb
  let sb = printOprs ins insAddr insLen fi pc wordSize sb
  sb.ToString ()

// vim: set tw=80 sts=2 sw=2:
